// <auto-generated />
using System;
using ArticlesManager.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArticlesManager.Migrations
{
    [DbContext(typeof(ArticlesDbContext))]
    [Migration("20220918160801_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArticlesManager.Domain.ArticleImages.ArticleImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uuid")
                        .HasColumnName("article_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_article_images");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("ix_article_images_article_id");

                    b.ToTable("article_images", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.ArticlePromotions.ArticlePromotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uuid")
                        .HasColumnName("article_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("Discount")
                        .HasColumnType("integer")
                        .HasColumnName("discount");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_id");

                    b.HasKey("Id")
                        .HasName("pk_article_promotions");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("ix_article_promotions_article_id");

                    b.HasIndex("PromotionId")
                        .HasDatabaseName("ix_article_promotions_promotion_id");

                    b.ToTable("article_promotions", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.Articles.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("brand_id");

                    b.Property<Guid?>("CollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("collection_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("FamilyId")
                        .HasColumnType("uuid")
                        .HasColumnName("family_id");

                    b.Property<string>("Generic1")
                        .HasColumnType("text")
                        .HasColumnName("generic1");

                    b.Property<string>("InternalReference")
                        .HasColumnType("text")
                        .HasColumnName("internal_reference");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsLowStock")
                        .HasColumnType("boolean")
                        .HasColumnName("is_low_stock");

                    b.Property<bool>("IsOutOfStock")
                        .HasColumnType("boolean")
                        .HasColumnName("is_out_of_stock");

                    b.Property<bool>("IsOutlet")
                        .HasColumnType("boolean")
                        .HasColumnName("is_outlet");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("MainArticleImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("main_article_image_url");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaName")
                        .HasColumnType("text")
                        .HasColumnName("meta_name");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double?>("PriceWithPromotion")
                        .HasColumnType("double precision")
                        .HasColumnName("price_with_promotion");

                    b.Property<string>("RowNumber")
                        .HasColumnType("text")
                        .HasColumnName("row_number");

                    b.Property<string>("SKU")
                        .HasColumnType("text")
                        .HasColumnName("sku");

                    b.Property<Guid?>("SubFamilyId")
                        .HasColumnType("uuid")
                        .HasColumnName("sub_family_id");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_articles");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("ix_articles_brand_id");

                    b.HasIndex("CollectionId")
                        .HasDatabaseName("ix_articles_collection_id");

                    b.HasIndex("FamilyId")
                        .HasDatabaseName("ix_articles_family_id");

                    b.HasIndex("SubFamilyId")
                        .HasDatabaseName("ix_articles_sub_family_id");

                    b.ToTable("articles", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.Barcodes.Barcode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uuid")
                        .HasColumnName("article_id");

                    b.Property<string>("BarcodeValue")
                        .HasColumnType("text")
                        .HasColumnName("barcode_value");

                    b.Property<string>("Color_Code")
                        .HasColumnType("text")
                        .HasColumnName("color_code");

                    b.Property<string>("Color_Description")
                        .HasColumnType("text")
                        .HasColumnName("color_description");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<int?>("ReservedQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("reserved_quantity");

                    b.Property<string>("Size")
                        .HasColumnType("text")
                        .HasColumnName("size");

                    b.Property<string>("Size_Description")
                        .HasColumnType("text")
                        .HasColumnName("size_description");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("stock_quantity");

                    b.HasKey("Id")
                        .HasName("pk_barcodes");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("ix_barcodes_article_id");

                    b.ToTable("barcodes", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.Brands.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.HasKey("Id")
                        .HasName("pk_brands");

                    b.ToTable("brands", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.Collections.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.HasKey("Id")
                        .HasName("pk_collections");

                    b.ToTable("collections", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.Families.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.HasKey("Id")
                        .HasName("pk_families");

                    b.ToTable("families", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.HomePageHighlights.HomePageHighlight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uuid")
                        .HasColumnName("article_id");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("brand_id");

                    b.Property<Guid?>("CollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("collection_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("pk_home_page_highlights");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("ix_home_page_highlights_article_id");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("ix_home_page_highlights_brand_id");

                    b.HasIndex("CollectionId")
                        .HasDatabaseName("ix_home_page_highlights_collection_id");

                    b.ToTable("home_page_highlights", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.Promotions.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Filter")
                        .HasColumnType("text")
                        .HasColumnName("filter");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_promotions");

                    b.ToTable("promotions", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.RolePermissions.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Permission")
                        .HasColumnType("text")
                        .HasColumnName("permission");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_role_permissions");

                    b.ToTable("role_permissions", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.SizeTableLines.SizeTableLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CM")
                        .HasColumnType("text")
                        .HasColumnName("cm");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("EU")
                        .HasColumnType("text")
                        .HasColumnName("eu");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<Guid?>("SizeTableId")
                        .HasColumnType("uuid")
                        .HasColumnName("size_table_id");

                    b.Property<string>("UK")
                        .HasColumnType("text")
                        .HasColumnName("uk");

                    b.Property<string>("US")
                        .HasColumnType("text")
                        .HasColumnName("us");

                    b.HasKey("Id")
                        .HasName("pk_size_table_lines");

                    b.HasIndex("SizeTableId")
                        .HasDatabaseName("ix_size_table_lines_size_table_id");

                    b.ToTable("size_table_lines", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.SizeTables.SizeTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid?>("FamilyId")
                        .HasColumnType("uuid")
                        .HasColumnName("family_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("SubFamilyId")
                        .HasColumnType("uuid")
                        .HasColumnName("sub_family_id");

                    b.HasKey("Id")
                        .HasName("pk_size_tables");

                    b.HasIndex("FamilyId")
                        .HasDatabaseName("ix_size_tables_family_id");

                    b.HasIndex("SubFamilyId")
                        .HasDatabaseName("ix_size_tables_sub_family_id");

                    b.ToTable("size_tables", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.SubFamilies.SubFamily", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.HasKey("Id")
                        .HasName("pk_sub_families");

                    b.ToTable("sub_families", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.UrlFilters.UrlFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("brand_id");

                    b.Property<Guid?>("CollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("collection_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid?>("FamilyId")
                        .HasColumnType("uuid")
                        .HasColumnName("family_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<Guid?>("SubFamilyId")
                        .HasColumnType("uuid")
                        .HasColumnName("sub_family_id");

                    b.Property<Guid?>("UrlId")
                        .HasColumnType("uuid")
                        .HasColumnName("url_id");

                    b.HasKey("Id")
                        .HasName("pk_url_filters");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("ix_url_filters_brand_id");

                    b.HasIndex("CollectionId")
                        .HasDatabaseName("ix_url_filters_collection_id");

                    b.HasIndex("FamilyId")
                        .HasDatabaseName("ix_url_filters_family_id");

                    b.HasIndex("SubFamilyId")
                        .HasDatabaseName("ix_url_filters_sub_family_id");

                    b.HasIndex("UrlId")
                        .HasDatabaseName("ix_url_filters_url_id");

                    b.ToTable("url_filters", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.Urls.Url", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaName")
                        .HasColumnType("text")
                        .HasColumnName("meta_name");

                    b.Property<string>("PageTitle")
                        .HasColumnType("text")
                        .HasColumnName("page_title");

                    b.Property<string>("UrlValue")
                        .HasColumnType("text")
                        .HasColumnName("url_value");

                    b.HasKey("Id")
                        .HasName("pk_urls");

                    b.ToTable("urls", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.UserCharts.UserChart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uuid")
                        .HasColumnName("article_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_charts");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("ix_user_charts_article_id");

                    b.ToTable("user_charts", (string)null);
                });

            modelBuilder.Entity("ArticlesManager.Domain.ArticleImages.ArticleImage", b =>
                {
                    b.HasOne("ArticlesManager.Domain.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("fk_article_images_articles_article_id");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("ArticlesManager.Domain.ArticlePromotions.ArticlePromotion", b =>
                {
                    b.HasOne("ArticlesManager.Domain.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("fk_article_promotions_articles_article_id");

                    b.HasOne("ArticlesManager.Domain.Promotions.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("fk_article_promotions_promotions_promotion_id");

                    b.Navigation("Article");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("ArticlesManager.Domain.Articles.Article", b =>
                {
                    b.HasOne("ArticlesManager.Domain.Brands.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .HasConstraintName("fk_articles_brands_brand_id");

                    b.HasOne("ArticlesManager.Domain.Collections.Collection", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .HasConstraintName("fk_articles_collections_collection_id");

                    b.HasOne("ArticlesManager.Domain.Families.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .HasConstraintName("fk_articles_families_family_id");

                    b.HasOne("ArticlesManager.Domain.SubFamilies.SubFamily", "SubFamily")
                        .WithMany()
                        .HasForeignKey("SubFamilyId")
                        .HasConstraintName("fk_articles_sub_families_sub_family_id");

                    b.Navigation("Brand");

                    b.Navigation("Collection");

                    b.Navigation("Family");

                    b.Navigation("SubFamily");
                });

            modelBuilder.Entity("ArticlesManager.Domain.Barcodes.Barcode", b =>
                {
                    b.HasOne("ArticlesManager.Domain.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("fk_barcodes_articles_article_id");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("ArticlesManager.Domain.HomePageHighlights.HomePageHighlight", b =>
                {
                    b.HasOne("ArticlesManager.Domain.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("fk_home_page_highlights_articles_article_id");

                    b.HasOne("ArticlesManager.Domain.Brands.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .HasConstraintName("fk_home_page_highlights_brands_brand_id");

                    b.HasOne("ArticlesManager.Domain.Collections.Collection", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .HasConstraintName("fk_home_page_highlights_collections_collection_id");

                    b.Navigation("Article");

                    b.Navigation("Brand");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("ArticlesManager.Domain.SizeTableLines.SizeTableLine", b =>
                {
                    b.HasOne("ArticlesManager.Domain.SizeTables.SizeTable", "SizeTable")
                        .WithMany()
                        .HasForeignKey("SizeTableId")
                        .HasConstraintName("fk_size_table_lines_size_tables_size_table_id");

                    b.Navigation("SizeTable");
                });

            modelBuilder.Entity("ArticlesManager.Domain.SizeTables.SizeTable", b =>
                {
                    b.HasOne("ArticlesManager.Domain.Families.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .HasConstraintName("fk_size_tables_families_family_id");

                    b.HasOne("ArticlesManager.Domain.SubFamilies.SubFamily", "SubFamily")
                        .WithMany()
                        .HasForeignKey("SubFamilyId")
                        .HasConstraintName("fk_size_tables_sub_families_sub_family_id");

                    b.Navigation("Family");

                    b.Navigation("SubFamily");
                });

            modelBuilder.Entity("ArticlesManager.Domain.UrlFilters.UrlFilter", b =>
                {
                    b.HasOne("ArticlesManager.Domain.Brands.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .HasConstraintName("fk_url_filters_brands_brand_id");

                    b.HasOne("ArticlesManager.Domain.Collections.Collection", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .HasConstraintName("fk_url_filters_collections_collection_id");

                    b.HasOne("ArticlesManager.Domain.Families.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .HasConstraintName("fk_url_filters_families_family_id");

                    b.HasOne("ArticlesManager.Domain.SubFamilies.SubFamily", "SubFamily")
                        .WithMany()
                        .HasForeignKey("SubFamilyId")
                        .HasConstraintName("fk_url_filters_sub_families_sub_family_id");

                    b.HasOne("ArticlesManager.Domain.Urls.Url", "Url")
                        .WithMany()
                        .HasForeignKey("UrlId")
                        .HasConstraintName("fk_url_filters_urls_url_id");

                    b.Navigation("Brand");

                    b.Navigation("Collection");

                    b.Navigation("Family");

                    b.Navigation("SubFamily");

                    b.Navigation("Url");
                });

            modelBuilder.Entity("ArticlesManager.Domain.UserCharts.UserChart", b =>
                {
                    b.HasOne("ArticlesManager.Domain.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("fk_user_charts_articles_article_id");

                    b.Navigation("Article");
                });
#pragma warning restore 612, 618
        }
    }
}
